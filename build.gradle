/*
 * Copyright (C) 2024 Karma Krafts & associates
 */

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.jetbrains.kotlin.jvm' version '1.8.21'
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

minecraft {
    mappings channel: mapping_channel, version: "${mapping_version}-${minecraft_version}"
    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.debug', 'true'
            property 'mixin.debug.dumpTargetOnFailure', 'true'
            property 'mixin.debug.verbose', 'true'
            property 'mixin.debug.hotSwap', 'true'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets {
    main {
        java { srcDirs = ['src/main/java', 'src/main/kotlin'] }
        kotlin { srcDirs = ['src/main/java', 'src/main/kotlin'] }
        resources { srcDirs = ['src/generated/resources', 'src/main/resources'] }
    }
}

configurations {
    annotationProcessor.extendsFrom minecraft
    library
    compileClasspath.extendsFrom library
    implementation.extendsFrom library
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

mixin {
    add sourceSets.main, "mixins.${mod_id}.refmap.json"
    config "mixins.${mod_id}.client.json"
    config "mixins.${mod_id}.common.json"
}

repositories {
    mavenCentral()
    maven { url = 'https://maven.covers1624.net' }
}

dependencies {
    minecraft group: 'net.minecraftforge', name: 'forge', version: "${minecraft_version}-${forge_version}"

    library group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jackson_version
    library group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jackson_version
    library group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jackson_version
    library group: 'io.karma.sliced', name: 'sliced', version: sliced_version
    library group: 'io.karma.material', name: 'material-color-utils', version: mcu_version
    library group: 'org.lz4', name: 'lz4-java', version: lz4_version

    // Same LWJGL version as vanilla, but add all platforms
    implementation group: 'org.lwjgl', name: 'lwjgl-yoga', version: lwjgl_version
    implementation group: 'org.lwjgl', name: 'lwjgl-yoga', version: lwjgl_version, classifier: 'natives-linux-arm32'
    implementation group: 'org.lwjgl', name: 'lwjgl-yoga', version: lwjgl_version, classifier: 'natives-linux-arm64'
    implementation group: 'org.lwjgl', name: 'lwjgl-yoga', version: lwjgl_version, classifier: 'natives-linux'
    implementation group: 'org.lwjgl', name: 'lwjgl-yoga', version: lwjgl_version, classifier: 'natives-macos-arm64'
    implementation group: 'org.lwjgl', name: 'lwjgl-yoga', version: lwjgl_version, classifier: 'natives-macos'
    implementation group: 'org.lwjgl', name: 'lwjgl-yoga', version: lwjgl_version, classifier: 'natives-windows-arm64'
    implementation group: 'org.lwjgl', name: 'lwjgl-yoga', version: lwjgl_version, classifier: 'natives-windows-x86'
    implementation group: 'org.lwjgl', name: 'lwjgl-yoga', version: lwjgl_version, classifier: 'natives-windows'
}

def commonManifest = {
    attributes([
            'MixinConfigs'            : "mixins.${mod_id}.client.json,mixins.${mod_id}.common.json",
            'Specification-Title'     : mod_id,
            'Specification-Vendor'    : mod_authors,
            'Specification-Version'   : '1', // We are version 1 of ourselves
            'Implementation-Title'    : project.name,
            'Implementation-Version'  : project.jar.archiveVersion,
            'Implementation-Vendor'   : mod_authors,
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
}

jar {
    from sourceSets.main.output
    archiveClassifier = 'slim'
    manifest commonManifest
    finalizedBy 'reobfJar'
}

shadowJar {
    from sourceSets.main.output
    archiveClassifier = ''
    manifest commonManifest
    finalizedBy 'reobfShadowJar'
    dependencies {
        include dependency(group: 'com.fasterxml.jackson.core', name: 'jackson-core')
        include dependency(group: 'com.fasterxml.jackson.core', name: 'jackson-annotations')
        include dependency(group: 'com.fasterxml.jackson.core', name: 'jackson-databind')
        include dependency(group: 'io.karma.sliced', name: 'sliced')
        include dependency(group: 'io.karma.material', name: 'material-color-utils')
        include dependency(group: 'org.lz4', name: 'lz4-java')
        include dependency(group: 'org.lwjgl', name: 'lwjgl-yoga')
        include dependency(group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib')
        include dependency(group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-common')
        include dependency(group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk7')
        include dependency(group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8')
    }
}

task apiJar(type: ShadowJar) {
    dependsOn shadowJar
    from sourceSets.main.output
    archiveClassifier = 'api'
    configurations.addAll(tasks.shadowJar.configurations)
    dependencies {
        include dependency(group: 'com.fasterxml.jackson.core', name: 'jackson-core')
        include dependency(group: 'com.fasterxml.jackson.core', name: 'jackson-annotations')
        include dependency(group: 'com.fasterxml.jackson.core', name: 'jackson-databind')
        include dependency(group: 'io.karma.sliced', name: 'sliced')
        include dependency(group: 'io.karma.material', name: 'material-color-utils')
        include dependency(group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib')
        include dependency(group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-common')
        include dependency(group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk7')
        include dependency(group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8')
    }
    exclude 'io/karma/pda/client/**'
    exclude 'io/karma/pda/common/**'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task apiSourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'api-sources'
    from sourceSets.main.allSource
    exclude 'io/karma/pda/client/**'
    exclude 'io/karma/pda/common/**'
}

reobf {
    shadowJar {}
    apiJar {}
}

processResources {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version       : forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

artifacts {
    archives jar
    archives shadowJar
    archives apiJar
    archives sourcesJar
    archives apiSourcesJar
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

publishing {
    repositories {
        maven {
            url "https://nexus.covers1624.net/repository/karmakrafts-releases/"

            if (System.getenv('MAVEN_PASSWORD')) {
                credentials {
                    username 'kitsunealex'
                    password System.getenv('MAVEN_PASSWORD')
                }
            }
        }
    }

    publications {
        pda(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version

            artifact jar
            artifact shadowJar
            artifact apiJar
            artifact sourcesJar
            artifact apiSourcesJar

            pom {
                name = archivesBaseName
                description = archivesBaseName
                url = "https://git.karmakrafts.dev/kk/commissions/${mod_id}"

                scm {
                    url = "https://git.karmakrafts.dev/kk/commissions/${mod_id}"
                }

                issueManagement {
                    system = 'gitlab'
                    url = "https://git.karmakrafts.dev/kk/commissions/${mod_id}/issues"
                }

                licenses {
                    license {
                        name = "All Rights Reserved"
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'kitsunealex'
                        name = 'KitsuneAlex'
                    }
                }
            }
        }
    }
}